"use client";

import { useState, useEffect } from "react";
import { useCurrentLanguage } from "@/hooks/getCurrentLanguage";
import { useDictionary } from "@/hooks/getDictionary";
import { Locale } from "@/i18n/config";
import { usePathname } from "next/navigation";
import { getImagesForProduct } from "@/hooks/getImagesForProduct";
import type { Product } from "@/types/product";
import ImageGallery from "@/components/ImageGallery";
import NotFound from "../not-found";

export default function ProductPage() {
  const pathname = usePathname();
  const id = pathname.split("/").pop() || null;
  const [product, setProduct] = useState<Product | null>(null);
  const [loading, setLoading] = useState(true);
  const [quantity, setQuantity] = useState(1);
  const [isOrdering, setIsOrdering] = useState(false);
  const locale = useCurrentLanguage() as Locale;
  const { dict } = useDictionary(locale);

  useEffect(() => {
    if (id) {
      fetchProduct();
    }
  }, [id]);

  const fetchProduct = async () => {
    try {
      const response = await fetch("/api/products");
      const data = await response.json();
      const foundProduct = data.products.find((p: Product) => p.id === id);
      setProduct(foundProduct || null);
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É:", error);
    } finally {
      setLoading(false);
    }
  };

  const updateQuantity = (newQuantity: number) => {
    if (newQuantity >= 1) {
      setQuantity(newQuantity);
    }
  };

  const calculatePrice = (product: Product, quantity: number) => {
    const isWholesale = quantity >= 6;
    const unitPrice = isWholesale ? product.price.from_6 : product.price.single;
    return {
      unitPrice: Math.round(unitPrice),
      totalPrice: Math.round(unitPrice * quantity),
      isWholesale,
    };
  };

  const handleBuyClick = async () => {
    if (!product || isOrdering) return;

    setIsOrdering(true);

    // try {
    const { totalPrice } = calculatePrice(product, quantity);
    const lang = locale === "uk" ? "uk" : "ru"; // –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ–∫–∞–ª—ñ –≤ —Ñ–æ—Ä–º–∞—Ç ru/uk

    console.log(
      `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${product.name[locale]}, –ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${quantity}, –¶—ñ–Ω–∞: ${totalPrice} –≥—Ä–Ω, –ú–æ–≤–∞: ${lang}`
    );
    // const response = await fetch("/api/send-telegram", {
    //   method: "POST",
    //   headers: {
    //     "Content-Type": "application/json",
    //   },
    //   body: JSON.stringify({
    //     productId: product.id,
    //     amount: quantity,
    //     price: totalPrice,
    //     lang: lang,
    //   }),
    // });

    // if (response.ok) {
    //   // –Ø–∫—â–æ API –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ —É—Å–ø—ñ—à–Ω–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ Telegram
    const telegramUrl = `https://t.me/CatsFreshBot?start=cats${product.idNumber}-${quantity}-${totalPrice}-${lang}shop`;
    window.open(telegramUrl, "_blank");
    // } else {
    //   console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è");
    //   // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø–æ–∫–∞–∑ –ø–æ–º–∏–ª–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    // }
    // } catch (error) {
    //   console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", error);
    //   // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø–æ–∫–∞–∑ –ø–æ–º–∏–ª–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    // } finally {
    setIsOrdering(false);
    // }
  };

  if (loading) {
    return (
      <div className="py-16 bg-gradient-to-b from-[var(--color-cream)] to-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          {dict?.products.loading || "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É..."}
        </div>
      </div>
    );
  }

  if (!product || !dict) {
    // return (
    //   <div className="py-16 bg-gradient-to-b from-[var(--color-cream)] to-white">
    //     <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
    //       {dict?.notFound.title || "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}
    //     </div>
    //   </div>
    // );
    return <NotFound />;
  }

  const { unitPrice, totalPrice, isWholesale } = calculatePrice(
    product,
    quantity
  );

  const productImages = getImagesForProduct(product.id);

  return (
    <section className="py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="bg-white rounded-2xl shadow-xl overflow-hidden flex flex-col lg:flex-row">
          {/* –ó–∞–º—ñ–Ω—é—î–º–æ –æ–¥–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ –≥–∞–ª–µ—Ä–µ—é */}
          <div className="relative lg:w-1/2">
            <ImageGallery
              images={productImages}
              productName={product.name[locale]}
            />
            {isWholesale && (
              <div className="absolute top-4 right-4 bg-[var(--color-burnt-orange)] text-white px-3 py-1 rounded-full text-sm font-semibold z-20">
                {dict?.product_page?.wholesale_active ||
                  "üéâ –û–ø—Ç–æ–≤–∞ –∑–Ω–∏–∂–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!"}
              </div>
            )}
          </div>

          <div className="p-8 lg:w-1/2 flex flex-col justify-between">
            <div>
              <h1 className="text-3xl font-bold text-[var(--color-forest-green)] mb-4">
                {product.name[locale]}
              </h1>
              <p className="text-[var(--color-forest-green)]/80 mb-8 text-lg">
                {product.description[locale]}
              </p>

              <div className="mb-8">
                <label className="block text-sm font-semibold text-[var(--color-forest-green)] mb-2">
                  {dict?.product_page?.amount || "–ö—ñ–ª—å–∫—ñ—Å—Ç—å"}
                </label>
                <div className="flex items-center justify-between bg-gray-100 rounded-lg p-2 w-40">
                  <button
                    onClick={() => updateQuantity(quantity - 1)}
                    className="w-8 h-8 rounded-full font-bold text-[var(--color-forest-green)] bg-[var(--color-lime-green)] hover:bg-[var(--color-burnt-orange)] hover:text-[var(--color-cream)] transition-colors"
                    disabled={quantity <= 1}
                  >
                    -
                  </button>
                  <span className="text-lg font-semibold text-[var(--color-forest-green)] min-w-[2rem] text-center">
                    {quantity}
                  </span>
                  <button
                    onClick={() => updateQuantity(quantity + 1)}
                    className="w-8 h-8 rounded-full font-bold text-[var(--color-forest-green)] bg-[var(--color-lime-green)] hover:bg-[var(--color-burnt-orange)] hover:text-[var(--color-cream)] transition-colors"
                  >
                    +
                  </button>
                </div>
                <div className="text-xs text-[var(--color-forest-green)]/60 mt-1">
                  {quantity >= 6
                    ? dict?.product_page?.wholesale_active ||
                      "üéâ –û–ø—Ç–æ–≤–∞ –∑–Ω–∏–∂–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!"
                    : dict?.product_page?.text_discount ||
                      "–í—ñ–¥ 6 —à—Ç. - –æ–ø—Ç–æ–≤–∞ —Ü—ñ–Ω–∞"}
                </div>
              </div>

              <div className="mb-8 p-4 bg-gradient-to-r from-[var(--color-lime-green)]/10 to-[var(--color-burnt-orange)]/10 rounded-lg">
                <div className="flex justify-between items-center mb-2">
                  <span className="text-sm text-[var(--color-forest-green)]">
                    {dict?.product_page?.price_per_unit || "–¶—ñ–Ω–∞ –∑–∞ —à—Ç:"}
                  </span>
                  <span className="text-lg font-bold text-[var(--color-forest-green)]">
                    {unitPrice} –≥—Ä–Ω
                  </span>
                </div>
                <div className="flex justify-between items-center border-t border-gray-200 pt-2">
                  <span className="text-sm font-semibold text-[var(--color-forest-green)]">
                    {dict?.product_page?.total_price.replace(
                      "{quantity}",
                      quantity.toString()
                    ) || `–†–∞–∑–æ–º (${quantity} —à—Ç):`}
                  </span>
                  <span className="text-xl font-bold text-[var(--color-burnt-orange)]">
                    {totalPrice} –≥—Ä–Ω
                  </span>
                </div>
              </div>
            </div>

            <div>
              <button
                onClick={handleBuyClick}
                disabled={isOrdering}
                className="w-full py-3 rounded-lg font-semibold text-[var(--color-forest-green)] bg-[var(--color-lime-green)] hover:bg-[var(--color-burnt-orange)] hover:text-[var(--color-cream)] hover:shadow-lg transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isOrdering
                  ? "–û–±—Ä–æ–±–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è..."
                  : dict?.product_page?.buy_now || "–ö—É–ø–∏—Ç–∏ –∑–∞—Ä–∞–∑"}
              </button>
              <p className="text-[var(--color-forest-green)]/80 text-sm mt-4 text-center">
                {dict?.product_page?.info_text ||
                  "–û—Ç—Ä–∏–º—É–π—Ç–µ —ñ–Ω—Ñ–æ –ø—Ä–æ –∑–Ω–∏–∂–∫–∏ —Ç–∞ –Ω–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏ –≤ –Ω–∞—à–æ–º—É –±–æ—Ç—ñ"}
              </p>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}

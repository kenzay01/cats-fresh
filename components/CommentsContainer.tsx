"use client";

import { useState, useEffect } from "react";
import CommentItem from "./CommentItem";
import { FaChevronLeft, FaChevronRight } from "react-icons/fa6";
// import testPic from "@/public/images/cats-fresh.png";
import comment1 from "@/public/comments/comment1.jpg";
import comment2 from "@/public/comments/comment2.jpg";
import comment3 from "@/public/comments/comment3.jpg";
import { useCurrentLanguage } from "@/hooks/getCurrentLanguage";
import { useDictionary } from "@/hooks/getDictionary";
import { Locale } from "@/i18n/config";
export default function CommentsContainer() {
  const locale = useCurrentLanguage() as Locale;
  const { dict } = useDictionary(locale);

  const comments = [
    {
      id: 1,
      name: "–ù–∞—Ç–∞–ª—ñ—è –ú–µ–ª—å–Ω–∏–∫",
      text: "–í—ñ—Ç–∞—é! –í–ø–µ—Ä—à–µ –∑–∞–º–æ–≤–∏–ª–∞ —Ü–µ–π –Ω–∞–ø–æ–≤–Ω—é–≤–∞—á —ñ —á–µ—Å–Ω–æ, –±—É–ª–∞ –≤—Ä–∞–∂–µ–Ω–∞, –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ —Ç–æ–º—É —â–æ —Ä–∞–Ω—ñ—à–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–ª–∞—Å—è —Å–∞–º–µ –ø—Ä–µ–º—ñ—É–º –ø–∞–∫–µ—Ç–∞–º–∏. –ö–æ–º–∫—É—î—Ç—å—Å—è —á—É–¥–æ–≤–æ —ñ –¥—ñ–π—Å–Ω–æ –ª–µ–≥–∫–æ –ø—Ä–∏–±–∏—Ä–∞—Ç–∏, –∞ —Ü–µ –ø—Ä—è–º –º—ñ–π –≥–æ–ª–æ–≤–Ω–∏–π –±—ñ–ª—å –±—É–≤ –∑–∞–≤–∂–¥–∏ –∑ –¥–µ—Ä–µ–≤–Ω–∏–º–∏. –¢–µ–ø–µ—Ä —è –≤–∞—à –ø–æ—Å—Ç—ñ–π–Ω–∏–π –∫–ª—ñ—î–Ω—Çü§ó",
      rating: 5,
      image: comment1,
    },
    {
      id: 2,
      name: "–ú–∞—Ä—ñ—è –Æ—Ä—á–µ–Ω–∫–æ",
      text: "–Ø –± –ø–æ—Å—Ç–∞–≤–∏–ª–∞ 5/5, –æ–¥—Ä–∞–∑—É –≤–∂–µ –∑–∞–º–æ–≤–∏–ª–∞ –æ–ø—Ç–æ–º –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ—ó –ø—Ä–æ–±–∏. –•–æ—Ç—ñ–ª–∞ –± –≤—ñ–¥–∑–Ω–∞—á–∏—Ç–∏ —â–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ñ—Å—Ç—å —ñ –∑—Ä—É—á–Ω—ñ—Å—Ç—å, –ø–µ—Ä—à–∏–π —Ä–∞–∑ –ø—Ä–æ–±—É–≤–∞–ª–∞ —Å–∞–º–µ —É –≤–∞–∫—É—É–º–Ω—ñ–π —É–ø–∞–∫–æ–≤—Ü—ñ, –Ω–µ —Ä–≤–µ—Ç—å—Å—è, –Ω–µ —Å–∏–ø–ª–µ—Ç—å—Å—è. –ù—É —ñ —â–µ –Ω–µ –º–∞–ª–æ –≤–∞–∂–ª–∏–≤–æ, —â–æ —Ü—ñ–Ω–∞ –¥—É–∂–µ –ø—Ä–∏—î–º–Ω–∞ —ñ –≤–∏—Å—Ç–∞—á–∞—î –¥–æ–≤—à–µ –Ω—ñ–∂ –¥–µ—è–∫—ñ –ø–æ 5 –∫–≥. –î—è–∫—É—é –∫–æ–º–∞–Ω–¥—ñ –ö–µ—Ç—Å –§—Ä–µ—à.",
      rating: 5,
      image: comment2,
    },
    {
      id: 3,
      name: "–ù–∞—Ç–∞–ª—ñ—è –¢–∫–∞—á—É–∫",
      text: "–î—É–∂–µ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–∞ –ø–æ–∫—É–ø–∫–æ—é. –ö—ñ—à–∫–∞ —à–≤–∏–¥–∫–æ –∑–≤–∏–∫–ª–∞ –¥–æ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–≤–Ω—é–≤–∞—á–∞, —ñ —à–≤–∏–¥–∫–æ –≤–±–∏—Ä–∞—î –∑–∞–ø–∞—Ö–∏.",
      rating: 5,
      image: comment3,
    },
  ];

  const [currentIndex, setCurrentIndex] = useState(0);
  const [isDesktop, setIsDesktop] = useState(false);

  useEffect(() => {
    const checkScreenSize = () => {
      setIsDesktop(window.innerWidth >= 1024);
    };

    checkScreenSize();
    window.addEventListener("resize", checkScreenSize);

    return () => window.removeEventListener("resize", checkScreenSize);
  }, []);

  const slidesToShow = isDesktop ? 3 : 1;
  const maxIndex = comments.length - slidesToShow;

  const nextSlide = () => {
    setCurrentIndex(currentIndex >= maxIndex ? 0 : currentIndex + 1);
  };

  const prevSlide = () => {
    setCurrentIndex(currentIndex <= 0 ? maxIndex : currentIndex - 1);
  };

  const goToSlide = (index: number) => {
    setCurrentIndex(index);
  };

  return (
    <section className="bg-white pb-8" id="comments">
      <div className="mx-auto px-4 sm:px-6 lg:px-8">
        <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold text-[var(--color-forest-green)] lg:mb-4 text-center">
          {dict?.comments?.title || "–í—ñ–¥–≥—É–∫–∏ –Ω–∞—à–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤"}
        </h1>

        <div className="relative">
          <div className="overflow-hidden">
            <div
              className="flex transition-transform duration-500 ease-in-out py-8"
              style={{
                transform: `translateX(-${
                  currentIndex * (100 / slidesToShow)
                }%)`,
              }}
            >
              {comments.map((comment) => (
                <div
                  key={comment.id}
                  className={`${
                    isDesktop ? "w-1/3" : "w-full"
                  } flex-shrink-0 px-2 lg:px-8`}
                >
                  <CommentItem
                    name={comment.name}
                    text={comment.text}
                    rating={comment.rating}
                    image={comment.image}
                  />
                </div>
              ))}
            </div>
          </div>

          {/* Navigation buttons - hidden on mobile if only one slide visible */}
          {comments.length > slidesToShow && (
            <>
              <button
                onClick={prevSlide}
                className="absolute -left-3 lg:left-4 top-1/2 transform -translate-y-1/2 bg-[var(--color-lime-green)] text-[var(--color-forest-green)] p-2 lg:p-3 rounded-full shadow-lg hover:bg-[var(--color-burnt-orange)] hover:text-[var(--color-cream)] transition-colors duration-300 z-10 border-2 border-[var(--color-forest-green)]"
                aria-label="–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–¥–≥—É–∫"
              >
                <FaChevronLeft size={isDesktop ? 20 : 16} />
              </button>

              <button
                onClick={nextSlide}
                className="absolute -right-3 lg:right-4 top-1/2 transform -translate-y-1/2 bg-[var(--color-lime-green)] text-[var(--color-forest-green)] p-2 lg:p-3 rounded-full shadow-lg hover:bg-[var(--color-burnt-orange)] hover:text-[var(--color-cream)] transition-colors duration-300 z-10 border-2 border-[var(--color-forest-green)]"
                aria-label="–ù–∞—Å—Ç—É–ø–Ω–∏–π –≤—ñ–¥–≥—É–∫"
              >
                <FaChevronRight size={isDesktop ? 20 : 16} />
              </button>
              <div className="flex justify-center mt-6 lg:mt-8 space-x-2">
                {Array.from({ length: maxIndex + 1 }, (_, index) => (
                  <button
                    key={index}
                    onClick={() => goToSlide(index)}
                    className={`w-2 h-2 lg:w-3 lg:h-3 rounded-full transition-colors duration-300 ${
                      currentIndex === index
                        ? "bg-[var(--color-burnt-orange)]"
                        : "bg-[var(--color-lime-green)]"
                    }`}
                    aria-label={`–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤—ñ–¥–≥—É–∫—É ${index + 1}`}
                  />
                ))}
              </div>
            </>
          )}
        </div>
      </div>
    </section>
  );
}
